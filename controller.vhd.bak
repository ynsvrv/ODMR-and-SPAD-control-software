library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity controller is
	Port (
		-- General
		CLK           : in  std_logic;
		RST           : in  std_logic;
		
		-- Internal communication between modules
		command			: in natural := 0;
		start				: in std_logic := '0'; -- Will start data acquisition process
		RST_counters	: out std_logic := '0';
		DATA_READY		: out std_logic := '0';

		-- Chip signals
		LOAD			: out std_logic := '0';
		CLEAR			: out std_logic := '0';
		SI_w			: out std_logic := '0';
		SI_d			: out std_logic := '0';
		RST_chip		: out std_logic := '0'
	);
end controller;

architecture behaviour of controller is

	signal collecting_data  			: std_logic := '0';
	signal collected_data   			: std_logic_vector(8191 downto 0);
	signal readout_cycle_counter	 	: natural := 0;
	signal readout_step_counter		: natural := 0;
	signal initialized					: std_logic := '0';
	signal SI_state						: natural := 0;

begin

	process(CLK)
	begin
		if rising_edge(CLK) then
			-- Reset
			if RST = '1' then
				collecting_data <= '0';
				readout_cycle_counter <= 0;
				readout_step_counter <= 0;
				initialized <= '0';
				DATA_READY <= '0';
				SI_state <= 0;
				-- Note: The chip will be reset in initialization part
			end if;
			
			-- Initialization
			if initialized = '0' then
				-- 
				RST_chip <= '1';
				LOAD <= '1';
				initialized <= '1';
			end if;
			
			-- After init, configure AQC reset delay and width with fixed values 00010(1) (order: flagbit, LSb, etc)
			-- Note: This delay and width can be configured from computer control, but that's outside our scope for now.
			if initialized = '1' then
				if SI_state = 0 then
					-- Send flag bit
					SI_d <= '1';
					SI_w <= '1';
					SI_state <= SI_state + 1;
				elsif SI_state = 1 then
					-- Send least significant data bit
					SI_d <= '0';
					SI_w <= '0';
					SI_state <= SI_state + 1;
				elsif SI_state = 2 then
					-- Send second-least significant data bit
					SI_d <= '1';
					SI_w <= '1';
				else
					-- The other bits don't matter because it's zero from here
					SI_d <= '0';
					SI_w <= '0';
				end if;
			end if;
			
			if start = '1' and collecting_data = '0' then
				readout_cycle_counter <= command; -- The command is interpreted as the number of readout cycles to be done
				collecting_data <= '1';
				
				-- Data acquisition
			elsif collecting_data = '1' then
				RST_counters <= '0';
				-- Data acquisition process
				-- Collect data for the specified duration and store in collected_data
				-- Set "load" and "clear" back to default state
				LOAD <= '1';
				CLEAR <= '0';
				if readout_cycle_counter > 0 then
					--Do the steps of the readout cycles
					if readout_step_counter = 0 then
						--Send clear pulse
						CLEAR <= '1';
						readout_step_counter <= readout_step_counter + 1;
					elsif readout_step_counter = 1 then
						-- Send the "load" pulse (active low)
						LOAD <= '0';
						readout_step_counter <= readout_step_counter + 1;
					elsif readout_step_counter = 19 then
						-- All serial data should have arrived now. End of readout cycle. Prepare for next one.
						readout_step_counter <= 0;
						readout_cycle_counter <= readout_cycle_counter - 1;
					else
						-- In the middle of readout cycle. Wait for serial data to complete.
						readout_step_counter <= readout_step_counter + 1;
					end if;	
				else
					collecting_data <= '0';
					DATA_READY <= '1'; -- Indicate that data is ready to be sent back
				end if;
			end if;
		end if;
    end process;
end architecture behaviour;
